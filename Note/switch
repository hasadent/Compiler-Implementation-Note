switch_statement
--------------------------------------------------
grammer:

    SWITCH <expr: cond>
        <list: switch_body>
    ENDSWITCH
--------------------------------------------------
tree structure:

    R:<node: switch>
        0:<expr: cond>
        1:<list: switch_body>
            +:<pair: case0>
            |   case->first:<list: case_cond>
            |      +:<constant: case_value>
            |      |
            |      ...
            |   case->second:<stmt_list: case_stmt>
            |
            +:<pair: case1>
            |
            ...

--------------------------------------------------
convertion:

    list list_0, list_1
    
    create_new_label lend
   
    cmp_value = cond
    if (cmp_value is not a <id>)
        list expr = expand_expr(cmp_value)
        list_0.append_list(expr)
        list_0.add(new_insn:'set cmp_value expr.back().lhs')
   
    foreach pair pp in switch_body
        if (pp->first is empty)
            stmt_list case_default = pp->second
        
        else
            create_new_label lcase
            
            foreach <constant> c in pp->first
                list_0.add(new_insn:'cmp cmp_value c')
                list_0.add(new_insn:'beq lcase')

            stmt_expand(pp->second)            
            list_1.add(new_insn:'set_label lcase')
            list_1.add(pp->second)
            list_1.add(new_insn:'goto lend')
    
    list_0.add(case_default)
    list_0.add(new_insn:'goto lend')
    
    list_0.append(list_1)
    list_0.add(new_insn:'set_label lend')
      
      
    

    
    
